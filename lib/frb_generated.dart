// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'db.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'multimint.dart';
import 'nostr.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 979969919;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'carbine_fedimint',
        ioDirectory: 'rust/carbine_fedimint/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  ClientConfig crateDbFederationConfigAutoAccessorGetClientConfig({
    required FederationConfig that,
  });

  Connector crateDbFederationConfigAutoAccessorGetConnector({
    required FederationConfig that,
  });

  String crateDbFederationConfigAutoAccessorGetFederationName({
    required FederationConfig that,
  });

  InviteCode crateDbFederationConfigAutoAccessorGetInviteCode({
    required FederationConfig that,
  });

  String? crateDbFederationConfigAutoAccessorGetNetwork({
    required FederationConfig that,
  });

  void crateDbFederationConfigAutoAccessorSetClientConfig({
    required FederationConfig that,
    required ClientConfig clientConfig,
  });

  void crateDbFederationConfigAutoAccessorSetConnector({
    required FederationConfig that,
    required Connector connector,
  });

  void crateDbFederationConfigAutoAccessorSetFederationName({
    required FederationConfig that,
    required String federationName,
  });

  void crateDbFederationConfigAutoAccessorSetInviteCode({
    required FederationConfig that,
    required InviteCode inviteCode,
  });

  void crateDbFederationConfigAutoAccessorSetNetwork({
    required FederationConfig that,
    String? network,
  });

  FederationId crateMultimintFederationSelectorAutoAccessorGetFederationId({
    required FederationSelector that,
  });

  String crateMultimintFederationSelectorAutoAccessorGetFederationName({
    required FederationSelector that,
  });

  String crateMultimintFederationSelectorAutoAccessorGetInviteCode({
    required FederationSelector that,
  });

  String? crateMultimintFederationSelectorAutoAccessorGetNetwork({
    required FederationSelector that,
  });

  void crateMultimintFederationSelectorAutoAccessorSetFederationId({
    required FederationSelector that,
    required FederationId federationId,
  });

  void crateMultimintFederationSelectorAutoAccessorSetFederationName({
    required FederationSelector that,
    required String federationName,
  });

  void crateMultimintFederationSelectorAutoAccessorSetInviteCode({
    required FederationSelector that,
    required String inviteCode,
  });

  void crateMultimintFederationSelectorAutoAccessorSetNetwork({
    required FederationSelector that,
    String? network,
  });

  Future<void> crateMultimintMultimintAckSeedPhrase({required Multimint that});

  Future<ReissueExternalNotesState> crateMultimintMultimintAwaitEcashReissue({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<SpendOobState> crateMultimintMultimintAwaitEcashSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<FinalReceiveOperationState> crateMultimintMultimintAwaitReceive({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<FinalSendOperationState> crateMultimintMultimintAwaitSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<BigInt> crateMultimintMultimintBalance({
    required Multimint that,
    required FederationId federationId,
  });

  Future<bool> crateMultimintMultimintContainsClient({
    required Multimint that,
    required FederationId federationId,
  });

  Future<List<(FederationSelector, bool)>> crateMultimintMultimintFederations({
    required Multimint that,
  });

  Future<(FederationMeta, FederationSelector)>
  crateMultimintMultimintGetFederationMeta({
    required Multimint that,
    required String invite,
  });

  Future<List<String>> crateMultimintMultimintGetMnemonic({
    required Multimint that,
  });

  Future<bool> crateMultimintMultimintHasSeedPhraseAck({
    required Multimint that,
  });

  Future<FederationSelector> crateMultimintMultimintJoinFederation({
    required Multimint that,
    required String invite,
    required bool recover,
  });

  Future<Multimint> crateMultimintMultimintNew({
    required Database db,
    required MultimintCreation creationType,
  });

  Future<BigInt> crateMultimintMultimintParseEcash({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  });

  Future<(Bolt11Invoice, OperationId)> crateMultimintMultimintReceive({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required SafeUrl gateway,
    required bool isLnv2,
  });

  Future<(String, BigInt)> crateMultimintMultimintRefund({
    required Multimint that,
    required FederationId federationId,
  });

  Future<OperationId> crateMultimintMultimintReissueEcash({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  });

  Future<(String, BigInt, bool)> crateMultimintMultimintSelectReceiveGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
  });

  Future<(String, BigInt, bool)> crateMultimintMultimintSelectSendGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
    required Bolt11Invoice bolt11,
  });

  Future<OperationId> crateMultimintMultimintSend({
    required Multimint that,
    required FederationId federationId,
    required String invoice,
    required SafeUrl gateway,
    required bool isLnv2,
  });

  Future<(OperationId, String, BigInt)> crateMultimintMultimintSendEcash({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsats,
  });

  Future<List<Transaction>> crateMultimintMultimintTransactions({
    required Multimint that,
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  });

  Future<FederationSelector> crateMultimintMultimintWaitForRecovery({
    required Multimint that,
    required String inviteCode,
  });

  Future<NostrClient> crateNostrNostrClientNew({required Database db});

  Future<void> crateNostrNostrClientUpdateFederationsFromNostr({
    required NostrClient that,
  });

  String? crateNostrPublicFederationAutoAccessorGetAbout({
    required PublicFederation that,
  });

  FederationId crateNostrPublicFederationAutoAccessorGetFederationId({
    required PublicFederation that,
  });

  String crateNostrPublicFederationAutoAccessorGetFederationName({
    required PublicFederation that,
  });

  List<String> crateNostrPublicFederationAutoAccessorGetInviteCodes({
    required PublicFederation that,
  });

  List<String> crateNostrPublicFederationAutoAccessorGetModules({
    required PublicFederation that,
  });

  String crateNostrPublicFederationAutoAccessorGetNetwork({
    required PublicFederation that,
  });

  String? crateNostrPublicFederationAutoAccessorGetPicture({
    required PublicFederation that,
  });

  void crateNostrPublicFederationAutoAccessorSetAbout({
    required PublicFederation that,
    String? about,
  });

  void crateNostrPublicFederationAutoAccessorSetFederationId({
    required PublicFederation that,
    required FederationId federationId,
  });

  void crateNostrPublicFederationAutoAccessorSetFederationName({
    required PublicFederation that,
    required String federationName,
  });

  void crateNostrPublicFederationAutoAccessorSetInviteCodes({
    required PublicFederation that,
    required List<String> inviteCodes,
  });

  void crateNostrPublicFederationAutoAccessorSetModules({
    required PublicFederation that,
    required List<String> modules,
  });

  void crateNostrPublicFederationAutoAccessorSetNetwork({
    required PublicFederation that,
    required String network,
  });

  void crateNostrPublicFederationAutoAccessorSetPicture({
    required PublicFederation that,
    String? picture,
  });

  Future<void> crateAckSeedPhrase();

  Future<ReissueExternalNotesState> crateAwaitEcashReissue({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<SpendOobState> crateAwaitEcashSend({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<FinalReceiveOperationState> crateAwaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<FinalSendOperationState> crateAwaitSend({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<BigInt> crateBalance({required FederationId federationId});

  Future<void> crateCreateMultimintFromWords({
    required String path,
    required List<String> words,
  });

  Future<void> crateCreateNewMultimint({required String path});

  Future<void> crateCreateNostrClient({required String path});

  Future<List<(FederationSelector, bool)>> crateFederations();

  Future<(FederationMeta, FederationSelector)> crateGetFederationMeta({
    required String inviteCode,
  });

  Future<List<String>> crateGetMnemonic();

  Future<bool> crateHasSeedPhraseAck();

  Future<FederationSelector> crateJoinFederation({
    required String inviteCode,
    required bool recover,
  });

  Future<List<PublicFederation>> crateListFederationsFromNostr({
    required bool forceUpdate,
  });

  Future<void> crateLoadMultimint({required String path});

  Future<BigInt> crateParseEcash({
    required FederationId federationId,
    required String ecash,
  });

  Future<PaymentPreview> cratePaymentPreview({
    required FederationId federationId,
    required String bolt11,
  });

  Future<(String, OperationId, String, String, BigInt)> crateReceive({
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required String gateway,
    required bool isLnv2,
  });

  Future<(String, BigInt)> crateRefund({required FederationId federationId});

  Future<OperationId> crateReissueEcash({
    required FederationId federationId,
    required String ecash,
  });

  Future<(String, BigInt, bool)> crateSelectReceiveGateway({
    required FederationId federationId,
    required BigInt amountMsats,
  });

  Future<OperationId> crateSend({
    required FederationId federationId,
    required String invoice,
    required String gateway,
    required bool isLnv2,
  });

  Future<(OperationId, String, BigInt)> crateSendEcash({
    required FederationId federationId,
    required BigInt amountMsats,
  });

  Future<OperationId> crateSendLnaddress({
    required FederationId federationId,
    required BigInt amountMsats,
    required String address,
  });

  Future<List<Transaction>> crateTransactions({
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  });

  Future<FederationSelector> crateWaitForRecovery({required String inviteCode});

  Future<bool> crateWalletExists({required String path});

  Future<List<String>> crateWordList();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Amount;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Amount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AmountPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Bolt11Invoice;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Bolt11Invoice;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_Bolt11InvoicePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientConfig;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Connector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Connector;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConnectorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Database;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Database;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DatabasePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FederationConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FederationIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationSelector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationSelector;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FederationSelectorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalReceiveOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalReceiveOperationState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FinalReceiveOperationStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalSendOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalSendOperationState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FinalSendOperationStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InviteCode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InviteCode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_InviteCodePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Multimint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Multimint;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MultimintPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_NostrClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_NostrClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NostrClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OperationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OperationId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OperationIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicFederation;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicFederation;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_PublicFederationPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReissueExternalNotesState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReissueExternalNotesState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ReissueExternalNotesStatePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_SafeUrl;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_SafeUrl;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SafeUrlPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SpendOobState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SpendOobState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SpendOobStatePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  ClientConfig crateDbFederationConfigAutoAccessorGetClientConfig({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetClientConfigConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorGetClientConfigConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_client_config",
        argNames: ["that"],
      );

  @override
  Connector crateDbFederationConfigAutoAccessorGetConnector({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetConnectorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorGetConnectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_connector",
        argNames: ["that"],
      );

  @override
  String crateDbFederationConfigAutoAccessorGetFederationName({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbFederationConfigAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  InviteCode crateDbFederationConfigAutoAccessorGetInviteCode({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetInviteCodeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorGetInviteCodeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_invite_code",
        argNames: ["that"],
      );

  @override
  String? crateDbFederationConfigAutoAccessorGetNetwork({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetNetworkConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_network",
        argNames: ["that"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetClientConfig({
    required FederationConfig that,
    required ClientConfig clientConfig,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
            clientConfig,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetClientConfigConstMeta,
        argValues: [that, clientConfig],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorSetClientConfigConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_client_config",
        argNames: ["that", "clientConfig"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetConnector({
    required FederationConfig that,
    required Connector connector,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
            connector,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetConnectorConstMeta,
        argValues: [that, connector],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorSetConnectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_connector",
        argNames: ["that", "connector"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetFederationName({
    required FederationConfig that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbFederationConfigAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetInviteCode({
    required FederationConfig that,
    required InviteCode inviteCode,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
            inviteCode,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetInviteCodeConstMeta,
        argValues: [that, inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorSetInviteCodeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_invite_code",
        argNames: ["that", "inviteCode"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetNetwork({
    required FederationConfig that,
    String? network,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_opt_String(network, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetNetworkConstMeta,
        argValues: [that, network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorSetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_network",
        argNames: ["that", "network"],
      );

  @override
  FederationId crateMultimintFederationSelectorAutoAccessorGetFederationId({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorGetFederationIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorGetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_federation_id",
        argNames: ["that"],
      );

  @override
  String crateMultimintFederationSelectorAutoAccessorGetFederationName({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  String crateMultimintFederationSelectorAutoAccessorGetInviteCode({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorGetInviteCodeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorGetInviteCodeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_invite_code",
        argNames: ["that"],
      );

  @override
  String? crateMultimintFederationSelectorAutoAccessorGetNetwork({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorGetNetworkConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_network",
        argNames: ["that"],
      );

  @override
  void crateMultimintFederationSelectorAutoAccessorSetFederationId({
    required FederationSelector that,
    required FederationId federationId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorSetFederationIdConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorSetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_federation_id",
        argNames: ["that", "federationId"],
      );

  @override
  void crateMultimintFederationSelectorAutoAccessorSetFederationName({
    required FederationSelector that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  void crateMultimintFederationSelectorAutoAccessorSetInviteCode({
    required FederationSelector that,
    required String inviteCode,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_String(inviteCode, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorSetInviteCodeConstMeta,
        argValues: [that, inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorSetInviteCodeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_invite_code",
        argNames: ["that", "inviteCode"],
      );

  @override
  void crateMultimintFederationSelectorAutoAccessorSetNetwork({
    required FederationSelector that,
    String? network,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_opt_String(network, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateMultimintFederationSelectorAutoAccessorSetNetworkConstMeta,
        argValues: [that, network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateMultimintFederationSelectorAutoAccessorSetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_network",
        argNames: ["that", "network"],
      );

  @override
  Future<void> crateMultimintMultimintAckSeedPhrase({required Multimint that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintAckSeedPhraseConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAckSeedPhraseConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_ack_seed_phrase",
        argNames: ["that"],
      );

  @override
  Future<ReissueExternalNotesState> crateMultimintMultimintAwaitEcashReissue({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitEcashReissueConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitEcashReissueConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_ecash_reissue",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<SpendOobState> crateMultimintMultimintAwaitEcashSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitEcashSendConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitEcashSendConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_ecash_send",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<FinalReceiveOperationState> crateMultimintMultimintAwaitReceive({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitReceiveConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitReceiveConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_receive",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<FinalSendOperationState> crateMultimintMultimintAwaitSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintAwaitSendConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintAwaitSendConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_await_send",
        argNames: ["that", "federationId", "operationId"],
      );

  @override
  Future<BigInt> crateMultimintMultimintBalance({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintBalanceConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintBalanceConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_balance",
        argNames: ["that", "federationId"],
      );

  @override
  Future<bool> crateMultimintMultimintContainsClient({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintContainsClientConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintContainsClientConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_contains_client",
        argNames: ["that", "federationId"],
      );

  @override
  Future<List<(FederationSelector, bool)>> crateMultimintMultimintFederations({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintFederationsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintFederationsConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_federations",
        argNames: ["that"],
      );

  @override
  Future<(FederationMeta, FederationSelector)>
  crateMultimintMultimintGetFederationMeta({
    required Multimint that,
    required String invite,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_String(invite, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_federation_meta_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintGetFederationMetaConstMeta,
        argValues: [that, invite],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetFederationMetaConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_federation_meta",
        argNames: ["that", "invite"],
      );

  @override
  Future<List<String>> crateMultimintMultimintGetMnemonic({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintGetMnemonicConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintGetMnemonicConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_get_mnemonic",
        argNames: ["that"],
      );

  @override
  Future<bool> crateMultimintMultimintHasSeedPhraseAck({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintHasSeedPhraseAckConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintHasSeedPhraseAckConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_has_seed_phrase_ack",
        argNames: ["that"],
      );

  @override
  Future<FederationSelector> crateMultimintMultimintJoinFederation({
    required Multimint that,
    required String invite,
    required bool recover,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_String(invite, serializer);
          sse_encode_bool(recover, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintJoinFederationConstMeta,
        argValues: [that, invite, recover],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintJoinFederationConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_join_federation",
        argNames: ["that", "invite", "recover"],
      );

  @override
  Future<Multimint> crateMultimintMultimintNew({
    required Database db,
    required MultimintCreation creationType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            db,
            serializer,
          );
          sse_encode_box_autoadd_multimint_creation(creationType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintNewConstMeta,
        argValues: [db, creationType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintNewConstMeta => const TaskConstMeta(
    debugName: "Multimint_new",
    argNames: ["db", "creationType"],
  );

  @override
  Future<BigInt> crateMultimintMultimintParseEcash({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintParseEcashConstMeta,
        argValues: [that, federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintParseEcashConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_parse_ecash",
        argNames: ["that", "federationId", "ecash"],
      );

  @override
  Future<(Bolt11Invoice, OperationId)> crateMultimintMultimintReceive({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required SafeUrl gateway,
    required bool isLnv2,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsatsWithFees, serializer);
          sse_encode_u_64(amountMsatsWithoutFees, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
            gateway,
            serializer,
          );
          sse_encode_bool(isLnv2, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintReceiveConstMeta,
        argValues: [
          that,
          federationId,
          amountMsatsWithFees,
          amountMsatsWithoutFees,
          gateway,
          isLnv2,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintReceiveConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_receive",
        argNames: [
          "that",
          "federationId",
          "amountMsatsWithFees",
          "amountMsatsWithoutFees",
          "gateway",
          "isLnv2",
        ],
      );

  @override
  Future<(String, BigInt)> crateMultimintMultimintRefund({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintRefundConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintRefundConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_refund",
        argNames: ["that", "federationId"],
      );

  @override
  Future<OperationId> crateMultimintMultimintReissueEcash({
    required Multimint that,
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintReissueEcashConstMeta,
        argValues: [that, federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintReissueEcashConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_reissue_ecash",
        argNames: ["that", "federationId", "ecash"],
      );

  @override
  Future<(String, BigInt, bool)> crateMultimintMultimintSelectReceiveGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
            amount,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSelectReceiveGatewayConstMeta,
        argValues: [that, federationId, amount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSelectReceiveGatewayConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_select_receive_gateway",
        argNames: ["that", "federationId", "amount"],
      );

  @override
  Future<(String, BigInt, bool)> crateMultimintMultimintSelectSendGateway({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
    required Bolt11Invoice bolt11,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
            amount,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
            bolt11,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSelectSendGatewayConstMeta,
        argValues: [that, federationId, amount, bolt11],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSelectSendGatewayConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_select_send_gateway",
        argNames: ["that", "federationId", "amount", "bolt11"],
      );

  @override
  Future<OperationId> crateMultimintMultimintSend({
    required Multimint that,
    required FederationId federationId,
    required String invoice,
    required SafeUrl gateway,
    required bool isLnv2,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(invoice, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
            gateway,
            serializer,
          );
          sse_encode_bool(isLnv2, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSendConstMeta,
        argValues: [that, federationId, invoice, gateway, isLnv2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSendConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_send",
        argNames: ["that", "federationId", "invoice", "gateway", "isLnv2"],
      );

  @override
  Future<(OperationId, String, BigInt)> crateMultimintMultimintSendEcash({
    required Multimint that,
    required FederationId federationId,
    required BigInt amountMsats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintSendEcashConstMeta,
        argValues: [that, federationId, amountMsats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintSendEcashConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_send_ecash",
        argNames: ["that", "federationId", "amountMsats"],
      );

  @override
  Future<List<Transaction>> crateMultimintMultimintTransactions({
    required Multimint that,
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_opt_box_autoadd_u_64(timestamp, serializer);
          sse_encode_opt_list_prim_u_8_strict(operationId, serializer);
          sse_encode_list_String(modules, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 40,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_transaction,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintMultimintTransactionsConstMeta,
        argValues: [that, federationId, timestamp, operationId, modules],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintTransactionsConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_transactions",
        argNames: [
          "that",
          "federationId",
          "timestamp",
          "operationId",
          "modules",
        ],
      );

  @override
  Future<FederationSelector> crateMultimintMultimintWaitForRecovery({
    required Multimint that,
    required String inviteCode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_String(inviteCode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 41,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintMultimintWaitForRecoveryConstMeta,
        argValues: [that, inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintMultimintWaitForRecoveryConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_wait_for_recovery",
        argNames: ["that", "inviteCode"],
      );

  @override
  Future<NostrClient> crateNostrNostrClientNew({required Database db}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
            db,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 42,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateNostrNostrClientNewConstMeta,
        argValues: [db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientNewConstMeta =>
      const TaskConstMeta(debugName: "NostrClient_new", argNames: ["db"]);

  @override
  Future<void> crateNostrNostrClientUpdateFederationsFromNostr({
    required NostrClient that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 43,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrNostrClientUpdateFederationsFromNostrConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrNostrClientUpdateFederationsFromNostrConstMeta =>
      const TaskConstMeta(
        debugName: "NostrClient_update_federations_from_nostr",
        argNames: ["that"],
      );

  @override
  String? crateNostrPublicFederationAutoAccessorGetAbout({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetAboutConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrPublicFederationAutoAccessorGetAboutConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_about",
        argNames: ["that"],
      );

  @override
  FederationId crateNostrPublicFederationAutoAccessorGetFederationId({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorGetFederationIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_federation_id",
        argNames: ["that"],
      );

  @override
  String crateNostrPublicFederationAutoAccessorGetFederationName({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  List<String> crateNostrPublicFederationAutoAccessorGetInviteCodes({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 47)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorGetInviteCodesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetInviteCodesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_invite_codes",
        argNames: ["that"],
      );

  @override
  List<String> crateNostrPublicFederationAutoAccessorGetModules({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetModulesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetModulesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_modules",
        argNames: ["that"],
      );

  @override
  String crateNostrPublicFederationAutoAccessorGetNetwork({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetNetworkConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_network",
        argNames: ["that"],
      );

  @override
  String? crateNostrPublicFederationAutoAccessorGetPicture({
    required PublicFederation that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorGetPictureConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorGetPictureConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_get_picture",
        argNames: ["that"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetAbout({
    required PublicFederation that,
    String? about,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_opt_String(about, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 51)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetAboutConstMeta,
        argValues: [that, about],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateNostrPublicFederationAutoAccessorSetAboutConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_about",
        argNames: ["that", "about"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetFederationId({
    required PublicFederation that,
    required FederationId federationId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorSetFederationIdConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_federation_id",
        argNames: ["that", "federationId"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetFederationName({
    required PublicFederation that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetInviteCodes({
    required PublicFederation that,
    required List<String> inviteCodes,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_list_String(inviteCodes, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateNostrPublicFederationAutoAccessorSetInviteCodesConstMeta,
        argValues: [that, inviteCodes],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetInviteCodesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_invite_codes",
        argNames: ["that", "inviteCodes"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetModules({
    required PublicFederation that,
    required List<String> modules,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_list_String(modules, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetModulesConstMeta,
        argValues: [that, modules],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetModulesConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_modules",
        argNames: ["that", "modules"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetNetwork({
    required PublicFederation that,
    required String network,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_String(network, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetNetworkConstMeta,
        argValues: [that, network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_network",
        argNames: ["that", "network"],
      );

  @override
  void crateNostrPublicFederationAutoAccessorSetPicture({
    required PublicFederation that,
    String? picture,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
            that,
            serializer,
          );
          sse_encode_opt_String(picture, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateNostrPublicFederationAutoAccessorSetPictureConstMeta,
        argValues: [that, picture],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateNostrPublicFederationAutoAccessorSetPictureConstMeta =>
      const TaskConstMeta(
        debugName: "PublicFederation_auto_accessor_set_picture",
        argNames: ["that", "picture"],
      );

  @override
  Future<void> crateAckSeedPhrase() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 58,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateAckSeedPhraseConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAckSeedPhraseConstMeta =>
      const TaskConstMeta(debugName: "ack_seed_phrase", argNames: []);

  @override
  Future<ReissueExternalNotesState> crateAwaitEcashReissue({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 59,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitEcashReissueConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitEcashReissueConstMeta => const TaskConstMeta(
    debugName: "await_ecash_reissue",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<SpendOobState> crateAwaitEcashSend({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 60,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitEcashSendConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitEcashSendConstMeta => const TaskConstMeta(
    debugName: "await_ecash_send",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<FinalReceiveOperationState> crateAwaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 61,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitReceiveConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitReceiveConstMeta => const TaskConstMeta(
    debugName: "await_receive",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<FinalSendOperationState> crateAwaitSend({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 62,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitSendConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitSendConstMeta => const TaskConstMeta(
    debugName: "await_send",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<BigInt> crateBalance({required FederationId federationId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 63,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateBalanceConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBalanceConstMeta =>
      const TaskConstMeta(debugName: "balance", argNames: ["federationId"]);

  @override
  Future<void> crateCreateMultimintFromWords({
    required String path,
    required List<String> words,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          sse_encode_list_String(words, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 64,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateCreateMultimintFromWordsConstMeta,
        argValues: [path, words],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCreateMultimintFromWordsConstMeta =>
      const TaskConstMeta(
        debugName: "create_multimint_from_words",
        argNames: ["path", "words"],
      );

  @override
  Future<void> crateCreateNewMultimint({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 65,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateCreateNewMultimintConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCreateNewMultimintConstMeta => const TaskConstMeta(
    debugName: "create_new_multimint",
    argNames: ["path"],
  );

  @override
  Future<void> crateCreateNostrClient({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 66,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateCreateNostrClientConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCreateNostrClientConstMeta =>
      const TaskConstMeta(debugName: "create_nostr_client", argNames: ["path"]);

  @override
  Future<List<(FederationSelector, bool)>> crateFederations() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 67,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateFederationsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateFederationsConstMeta =>
      const TaskConstMeta(debugName: "federations", argNames: []);

  @override
  Future<(FederationMeta, FederationSelector)> crateGetFederationMeta({
    required String inviteCode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(inviteCode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 68,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_federation_meta_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateGetFederationMetaConstMeta,
        argValues: [inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetFederationMetaConstMeta => const TaskConstMeta(
    debugName: "get_federation_meta",
    argNames: ["inviteCode"],
  );

  @override
  Future<List<String>> crateGetMnemonic() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 69,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateGetMnemonicConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateGetMnemonicConstMeta =>
      const TaskConstMeta(debugName: "get_mnemonic", argNames: []);

  @override
  Future<bool> crateHasSeedPhraseAck() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 70,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateHasSeedPhraseAckConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateHasSeedPhraseAckConstMeta =>
      const TaskConstMeta(debugName: "has_seed_phrase_ack", argNames: []);

  @override
  Future<FederationSelector> crateJoinFederation({
    required String inviteCode,
    required bool recover,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(inviteCode, serializer);
          sse_encode_bool(recover, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 71,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateJoinFederationConstMeta,
        argValues: [inviteCode, recover],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateJoinFederationConstMeta => const TaskConstMeta(
    debugName: "join_federation",
    argNames: ["inviteCode", "recover"],
  );

  @override
  Future<List<PublicFederation>> crateListFederationsFromNostr({
    required bool forceUpdate,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(forceUpdate, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 72,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation,
          decodeErrorData: null,
        ),
        constMeta: kCrateListFederationsFromNostrConstMeta,
        argValues: [forceUpdate],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateListFederationsFromNostrConstMeta =>
      const TaskConstMeta(
        debugName: "list_federations_from_nostr",
        argNames: ["forceUpdate"],
      );

  @override
  Future<void> crateLoadMultimint({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 73,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateLoadMultimintConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateLoadMultimintConstMeta =>
      const TaskConstMeta(debugName: "load_multimint", argNames: ["path"]);

  @override
  Future<BigInt> crateParseEcash({
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 74,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateParseEcashConstMeta,
        argValues: [federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateParseEcashConstMeta => const TaskConstMeta(
    debugName: "parse_ecash",
    argNames: ["federationId", "ecash"],
  );

  @override
  Future<PaymentPreview> cratePaymentPreview({
    required FederationId federationId,
    required String bolt11,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(bolt11, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 75,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_payment_preview,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCratePaymentPreviewConstMeta,
        argValues: [federationId, bolt11],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCratePaymentPreviewConstMeta => const TaskConstMeta(
    debugName: "payment_preview",
    argNames: ["federationId", "bolt11"],
  );

  @override
  Future<(String, OperationId, String, String, BigInt)> crateReceive({
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required String gateway,
    required bool isLnv2,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsatsWithFees, serializer);
          sse_encode_u_64(amountMsatsWithoutFees, serializer);
          sse_encode_String(gateway, serializer);
          sse_encode_bool(isLnv2, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 76,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateReceiveConstMeta,
        argValues: [
          federationId,
          amountMsatsWithFees,
          amountMsatsWithoutFees,
          gateway,
          isLnv2,
        ],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateReceiveConstMeta => const TaskConstMeta(
    debugName: "receive",
    argNames: [
      "federationId",
      "amountMsatsWithFees",
      "amountMsatsWithoutFees",
      "gateway",
      "isLnv2",
    ],
  );

  @override
  Future<(String, BigInt)> crateRefund({required FederationId federationId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 77,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateRefundConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateRefundConstMeta =>
      const TaskConstMeta(debugName: "refund", argNames: ["federationId"]);

  @override
  Future<OperationId> crateReissueEcash({
    required FederationId federationId,
    required String ecash,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(ecash, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 78,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateReissueEcashConstMeta,
        argValues: [federationId, ecash],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateReissueEcashConstMeta => const TaskConstMeta(
    debugName: "reissue_ecash",
    argNames: ["federationId", "ecash"],
  );

  @override
  Future<(String, BigInt, bool)> crateSelectReceiveGateway({
    required FederationId federationId,
    required BigInt amountMsats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 79,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_record_string_u_64_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSelectReceiveGatewayConstMeta,
        argValues: [federationId, amountMsats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSelectReceiveGatewayConstMeta => const TaskConstMeta(
    debugName: "select_receive_gateway",
    argNames: ["federationId", "amountMsats"],
  );

  @override
  Future<OperationId> crateSend({
    required FederationId federationId,
    required String invoice,
    required String gateway,
    required bool isLnv2,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(invoice, serializer);
          sse_encode_String(gateway, serializer);
          sse_encode_bool(isLnv2, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 80,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSendConstMeta,
        argValues: [federationId, invoice, gateway, isLnv2],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSendConstMeta => const TaskConstMeta(
    debugName: "send",
    argNames: ["federationId", "invoice", "gateway", "isLnv2"],
  );

  @override
  Future<(OperationId, String, BigInt)> crateSendEcash({
    required FederationId federationId,
    required BigInt amountMsats,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 81,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSendEcashConstMeta,
        argValues: [federationId, amountMsats],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSendEcashConstMeta => const TaskConstMeta(
    debugName: "send_ecash",
    argNames: ["federationId", "amountMsats"],
  );

  @override
  Future<OperationId> crateSendLnaddress({
    required FederationId federationId,
    required BigInt amountMsats,
    required String address,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_u_64(amountMsats, serializer);
          sse_encode_String(address, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 82,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSendLnaddressConstMeta,
        argValues: [federationId, amountMsats, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSendLnaddressConstMeta => const TaskConstMeta(
    debugName: "send_lnaddress",
    argNames: ["federationId", "amountMsats", "address"],
  );

  @override
  Future<List<Transaction>> crateTransactions({
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_opt_box_autoadd_u_64(timestamp, serializer);
          sse_encode_opt_list_prim_u_8_strict(operationId, serializer);
          sse_encode_list_String(modules, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 83,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_transaction,
          decodeErrorData: null,
        ),
        constMeta: kCrateTransactionsConstMeta,
        argValues: [federationId, timestamp, operationId, modules],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateTransactionsConstMeta => const TaskConstMeta(
    debugName: "transactions",
    argNames: ["federationId", "timestamp", "operationId", "modules"],
  );

  @override
  Future<FederationSelector> crateWaitForRecovery({
    required String inviteCode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(inviteCode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 84,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateWaitForRecoveryConstMeta,
        argValues: [inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWaitForRecoveryConstMeta => const TaskConstMeta(
    debugName: "wait_for_recovery",
    argNames: ["inviteCode"],
  );

  @override
  Future<bool> crateWalletExists({required String path}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 85,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateWalletExistsConstMeta,
        argValues: [path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWalletExistsConstMeta =>
      const TaskConstMeta(debugName: "wallet_exists", argNames: ["path"]);

  @override
  Future<List<String>> crateWordList() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 86,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateWordListConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateWordListConstMeta =>
      const TaskConstMeta(debugName: "word_list", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Amount =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Amount =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Bolt11Invoice =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Bolt11Invoice =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Connector =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Connector =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Database =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Database =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationSelector =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationSelector =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalReceiveOperationState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalReceiveOperationState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalSendOperationState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalSendOperationState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InviteCode =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InviteCode =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Multimint =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Multimint =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_NostrClient =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_NostrClient =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OperationId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OperationId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PublicFederation =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PublicFederation =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ReissueExternalNotesState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ReissueExternalNotesState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SafeUrl =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SafeUrl =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SpendOobState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SpendOobState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Amount
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Bolt11Invoice
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connector
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FinalReceiveOperationState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FinalSendOperationState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  InviteCode
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrClient
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OperationId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReissueExternalNotesState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  SafeUrl
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SafeUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpendOobState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrClient
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Amount
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Bolt11Invoice
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connector
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Database
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DatabaseImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FinalReceiveOperationState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FinalSendOperationState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  InviteCode
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  NostrClient
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NostrClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OperationId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PublicFederation
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PublicFederationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReissueExternalNotesState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  SafeUrl
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SafeUrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpendOobState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  MultimintCreation dco_decode_box_autoadd_multimint_creation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_multimint_creation(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  FederationMeta dco_decode_federation_meta(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FederationMeta(
      picture: dco_decode_opt_String(arr[0]),
      welcome: dco_decode_opt_String(arr[1]),
      guardians: dco_decode_list_guardian(arr[2]),
    );
  }

  @protected
  Guardian dco_decode_guardian(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Guardian(
      name: dco_decode_String(arr[0]),
      version: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  List<PublicFederation>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation,
        )
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Guardian> dco_decode_list_guardian(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_guardian).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(FederationSelector, bool)>
  dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool,
        )
        .toList();
  }

  @protected
  List<Transaction> dco_decode_list_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_transaction).toList();
  }

  @protected
  MultimintCreation dco_decode_multimint_creation(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return MultimintCreation_New();
      case 1:
        return MultimintCreation_LoadExisting();
      case 2:
        return MultimintCreation_NewFromMnemonic(
          words: dco_decode_list_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  PaymentPreview dco_decode_payment_preview(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return PaymentPreview(
      amountMsats: dco_decode_u_64(arr[0]),
      paymentHash: dco_decode_String(arr[1]),
      network: dco_decode_String(arr[2]),
      invoice: dco_decode_String(arr[3]),
      gateway: dco_decode_String(arr[4]),
      amountWithFees: dco_decode_u_64(arr[5]),
      isLnv2: dco_decode_bool(arr[6]),
    );
  }

  @protected
  (Bolt11Invoice, OperationId)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
        arr[1],
      ),
    );
  }

  @protected
  (FederationSelector, bool)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        arr[0],
      ),
      dco_decode_bool(arr[1]),
    );
  }

  @protected
  (OperationId, String, BigInt)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
        arr[0],
      ),
      dco_decode_String(arr[1]),
      dco_decode_u_64(arr[2]),
    );
  }

  @protected
  (FederationMeta, FederationSelector)
  dco_decode_record_federation_meta_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_federation_meta(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        arr[1],
      ),
    );
  }

  @protected
  (String, OperationId, String, String, BigInt)
  dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5) {
      throw Exception('Expected 5 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
        arr[1],
      ),
      dco_decode_String(arr[2]),
      dco_decode_String(arr[3]),
      dco_decode_u_64(arr[4]),
    );
  }

  @protected
  (String, BigInt) dco_decode_record_string_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_u_64(arr[1]));
  }

  @protected
  (String, BigInt, bool) dco_decode_record_string_u_64_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_u_64(arr[1]),
      dco_decode_bool(arr[2]),
    );
  }

  @protected
  Transaction dco_decode_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Transaction(
      received: dco_decode_bool(arr[0]),
      amount: dco_decode_u_64(arr[1]),
      module: dco_decode_String(arr[2]),
      timestamp: dco_decode_u_64(arr[3]),
      operationId: dco_decode_list_prim_u_8_strict(arr[4]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Amount
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AmountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Bolt11Invoice
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Connector
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Database
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalReceiveOperationState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalSendOperationState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InviteCode
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteCodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NostrClient
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OperationId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReissueExternalNotesState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SafeUrl
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SafeUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SpendOobState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NostrClient
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Amount
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AmountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Bolt11Invoice
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Bolt11InvoiceImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Connector
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Database
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DatabaseImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalReceiveOperationState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalSendOperationState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InviteCode
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteCodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  NostrClient
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NostrClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OperationId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PublicFederation
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PublicFederationImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ReissueExternalNotesState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReissueExternalNotesStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SafeUrl
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SafeUrlImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SpendOobState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpendOobStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  MultimintCreation sse_decode_box_autoadd_multimint_creation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_multimint_creation(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  FederationMeta sse_decode_federation_meta(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_picture = sse_decode_opt_String(deserializer);
    var var_welcome = sse_decode_opt_String(deserializer);
    var var_guardians = sse_decode_list_guardian(deserializer);
    return FederationMeta(
      picture: var_picture,
      welcome: var_welcome,
      guardians: var_guardians,
    );
  }

  @protected
  Guardian sse_decode_guardian(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_version = sse_decode_opt_String(deserializer);
    return Guardian(name: var_name, version: var_version);
  }

  @protected
  List<PublicFederation>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PublicFederation>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Guardian> sse_decode_list_guardian(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Guardian>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_guardian(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(FederationSelector, bool)>
  sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(FederationSelector, bool)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<Transaction> sse_decode_list_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Transaction>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_transaction(deserializer));
    }
    return ans_;
  }

  @protected
  MultimintCreation sse_decode_multimint_creation(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return MultimintCreation_New();
      case 1:
        return MultimintCreation_LoadExisting();
      case 2:
        var var_words = sse_decode_list_String(deserializer);
        return MultimintCreation_NewFromMnemonic(words: var_words);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PaymentPreview sse_decode_payment_preview(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountMsats = sse_decode_u_64(deserializer);
    var var_paymentHash = sse_decode_String(deserializer);
    var var_network = sse_decode_String(deserializer);
    var var_invoice = sse_decode_String(deserializer);
    var var_gateway = sse_decode_String(deserializer);
    var var_amountWithFees = sse_decode_u_64(deserializer);
    var var_isLnv2 = sse_decode_bool(deserializer);
    return PaymentPreview(
      amountMsats: var_amountMsats,
      paymentHash: var_paymentHash,
      network: var_network,
      invoice: var_invoice,
      gateway: var_gateway,
      amountWithFees: var_amountWithFees,
      isLnv2: var_isLnv2,
    );
  }

  @protected
  (Bolt11Invoice, OperationId)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (FederationSelector, bool)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          deserializer,
        );
    var var_field1 = sse_decode_bool(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (OperationId, String, BigInt)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
          deserializer,
        );
    var var_field1 = sse_decode_String(deserializer);
    var var_field2 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (FederationMeta, FederationSelector)
  sse_decode_record_federation_meta_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_federation_meta(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (String, OperationId, String, String, BigInt)
  sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
          deserializer,
        );
    var var_field2 = sse_decode_String(deserializer);
    var var_field3 = sse_decode_String(deserializer);
    var var_field4 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1, var_field2, var_field3, var_field4);
  }

  @protected
  (String, BigInt) sse_decode_record_string_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, BigInt, bool) sse_decode_record_string_u_64_bool(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    var var_field2 = sse_decode_bool(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  Transaction sse_decode_transaction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_received = sse_decode_bool(deserializer);
    var var_amount = sse_decode_u_64(deserializer);
    var var_module = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    var var_operationId = sse_decode_list_prim_u_8_strict(deserializer);
    return Transaction(
      received: var_received,
      amount: var_amount,
      module: var_module,
      timestamp: var_timestamp,
      operationId: var_operationId,
    );
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    Amount self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AmountImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    Bolt11Invoice self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Bolt11InvoiceImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    ClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    Connector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    Database self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DatabaseImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    FinalReceiveOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalReceiveOperationStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    FinalSendOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalSendOperationStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    InviteCode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InviteCodeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    NostrClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NostrClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    OperationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OperationIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    ReissueExternalNotesState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReissueExternalNotesStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SafeUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SafeUrlImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SpendOobState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SpendOobStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    NostrClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NostrClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    Amount self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AmountImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
    Bolt11Invoice self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as Bolt11InvoiceImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientConfig(
    ClientConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    Connector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDatabase(
    Database self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as DatabaseImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    FinalReceiveOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalReceiveOperationStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    FinalSendOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalSendOperationStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    InviteCode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InviteCodeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerNostrClient(
    NostrClient self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as NostrClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    OperationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OperationIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    PublicFederation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PublicFederationImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReissueExternalNotesState(
    ReissueExternalNotesState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ReissueExternalNotesStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSafeUrl(
    SafeUrl self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SafeUrlImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpendOOBState(
    SpendOobState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SpendOobStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_multimint_creation(
    MultimintCreation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_multimint_creation(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_federation_meta(
    FederationMeta self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.picture, serializer);
    sse_encode_opt_String(self.welcome, serializer);
    sse_encode_list_guardian(self.guardians, serializer);
  }

  @protected
  void sse_encode_guardian(Guardian self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_opt_String(self.version, serializer);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
    List<PublicFederation> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPublicFederation(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_guardian(List<Guardian> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_guardian(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    List<(FederationSelector, bool)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_transaction(
    List<Transaction> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_transaction(item, serializer);
    }
  }

  @protected
  void sse_encode_multimint_creation(
    MultimintCreation self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case MultimintCreation_New():
        sse_encode_i_32(0, serializer);
      case MultimintCreation_LoadExisting():
        sse_encode_i_32(1, serializer);
      case MultimintCreation_NewFromMnemonic(words: final words):
        sse_encode_i_32(2, serializer);
        sse_encode_list_String(words, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
    Uint8List? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_payment_preview(
    PaymentPreview self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amountMsats, serializer);
    sse_encode_String(self.paymentHash, serializer);
    sse_encode_String(self.network, serializer);
    sse_encode_String(self.invoice, serializer);
    sse_encode_String(self.gateway, serializer);
    sse_encode_u_64(self.amountWithFees, serializer);
    sse_encode_bool(self.isLnv2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_bolt_11_invoice_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    (Bolt11Invoice, OperationId) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBolt11Invoice(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector_bool(
    (FederationSelector, bool) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      self.$1,
      serializer,
    );
    sse_encode_bool(self.$2, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_u_64(
    (OperationId, String, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
      self.$1,
      serializer,
    );
    sse_encode_String(self.$2, serializer);
    sse_encode_u_64(self.$3, serializer);
  }

  @protected
  void
  sse_encode_record_federation_meta_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_federation_selector(
    (FederationMeta, FederationSelector) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_federation_meta(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id_string_string_u_64(
    (String, OperationId, String, String, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
      self.$2,
      serializer,
    );
    sse_encode_String(self.$3, serializer);
    sse_encode_String(self.$4, serializer);
    sse_encode_u_64(self.$5, serializer);
  }

  @protected
  void sse_encode_record_string_u_64(
    (String, BigInt) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_u_64_bool(
    (String, BigInt, bool) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
    sse_encode_bool(self.$3, serializer);
  }

  @protected
  void sse_encode_transaction(Transaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.received, serializer);
    sse_encode_u_64(self.amount, serializer);
    sse_encode_String(self.module, serializer);
    sse_encode_u_64(self.timestamp, serializer);
    sse_encode_list_prim_u_8_strict(self.operationId, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class AmountImpl extends RustOpaque implements Amount {
  // Not to be used by end users
  AmountImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AmountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Amount,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Amount,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AmountPtr,
  );
}

@sealed
class Bolt11InvoiceImpl extends RustOpaque implements Bolt11Invoice {
  // Not to be used by end users
  Bolt11InvoiceImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  Bolt11InvoiceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Bolt11Invoice,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Bolt11Invoice,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_Bolt11InvoicePtr,
  );
}

@sealed
class ClientConfigImpl extends RustOpaque implements ClientConfig {
  // Not to be used by end users
  ClientConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientConfigImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientConfig,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientConfigPtr,
  );
}

@sealed
class ConnectorImpl extends RustOpaque implements Connector {
  // Not to be used by end users
  ConnectorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConnectorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Connector,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Connector,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConnectorPtr,
  );
}

@sealed
class DatabaseImpl extends RustOpaque implements Database {
  // Not to be used by end users
  DatabaseImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DatabaseImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Database,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Database,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DatabasePtr,
  );
}

@sealed
class FederationConfigImpl extends RustOpaque implements FederationConfig {
  // Not to be used by end users
  FederationConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationConfig,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FederationConfigPtr,
  );

  ClientConfig get clientConfig => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetClientConfig(that: this);

  Connector get connector => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetConnector(that: this);

  String get federationName => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetFederationName(that: this);

  InviteCode get inviteCode => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetInviteCode(that: this);

  String? get network => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetNetwork(that: this);

  set clientConfig(ClientConfig clientConfig) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetClientConfig(
        that: this,
        clientConfig: clientConfig,
      );

  set connector(Connector connector) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetConnector(
        that: this,
        connector: connector,
      );

  set federationName(String federationName) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );

  set inviteCode(InviteCode inviteCode) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetInviteCode(
        that: this,
        inviteCode: inviteCode,
      );

  set network(String? network) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetNetwork(
        that: this,
        network: network,
      );
}

@sealed
class FederationIdImpl extends RustOpaque implements FederationId {
  // Not to be used by end users
  FederationIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationIdPtr,
  );
}

@sealed
class FederationSelectorImpl extends RustOpaque implements FederationSelector {
  // Not to be used by end users
  FederationSelectorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationSelectorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationSelector,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationSelector,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FederationSelectorPtr,
  );

  FederationId get federationId => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorGetFederationId(that: this);

  String get federationName => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorGetFederationName(
        that: this,
      );

  String get inviteCode => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorGetInviteCode(that: this);

  String? get network => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorGetNetwork(that: this);

  set federationId(FederationId federationId) => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorSetFederationId(
        that: this,
        federationId: federationId,
      );

  set federationName(String federationName) => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );

  set inviteCode(String inviteCode) => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorSetInviteCode(
        that: this,
        inviteCode: inviteCode,
      );

  set network(String? network) => RustLib.instance.api
      .crateMultimintFederationSelectorAutoAccessorSetNetwork(
        that: this,
        network: network,
      );
}

@sealed
class FinalReceiveOperationStateImpl extends RustOpaque
    implements FinalReceiveOperationState {
  // Not to be used by end users
  FinalReceiveOperationStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FinalReceiveOperationStateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FinalReceiveOperationState,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalReceiveOperationState,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalReceiveOperationStatePtr,
  );
}

@sealed
class FinalSendOperationStateImpl extends RustOpaque
    implements FinalSendOperationState {
  // Not to be used by end users
  FinalSendOperationStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FinalSendOperationStateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FinalSendOperationState,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalSendOperationState,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalSendOperationStatePtr,
  );
}

@sealed
class InviteCodeImpl extends RustOpaque implements InviteCode {
  // Not to be used by end users
  InviteCodeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InviteCodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_InviteCode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_InviteCode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_InviteCodePtr,
  );
}

@sealed
class MultimintImpl extends RustOpaque implements Multimint {
  // Not to be used by end users
  MultimintImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MultimintImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Multimint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Multimint,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MultimintPtr,
  );

  Future<void> ackSeedPhrase() =>
      RustLib.instance.api.crateMultimintMultimintAckSeedPhrase(that: this);

  Future<ReissueExternalNotesState> awaitEcashReissue({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitEcashReissue(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<SpendOobState> awaitEcashSend({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitEcashSend(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<FinalReceiveOperationState> awaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitReceive(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<FinalSendOperationState> awaitSend({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintMultimintAwaitSend(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<BigInt> balance({required FederationId federationId}) => RustLib
      .instance
      .api
      .crateMultimintMultimintBalance(that: this, federationId: federationId);

  Future<bool> containsClient({required FederationId federationId}) =>
      RustLib.instance.api.crateMultimintMultimintContainsClient(
        that: this,
        federationId: federationId,
      );

  Future<List<(FederationSelector, bool)>> federations() =>
      RustLib.instance.api.crateMultimintMultimintFederations(that: this);

  Future<(FederationMeta, FederationSelector)> getFederationMeta({
    required String invite,
  }) => RustLib.instance.api.crateMultimintMultimintGetFederationMeta(
    that: this,
    invite: invite,
  );

  Future<List<String>> getMnemonic() =>
      RustLib.instance.api.crateMultimintMultimintGetMnemonic(that: this);

  Future<bool> hasSeedPhraseAck() =>
      RustLib.instance.api.crateMultimintMultimintHasSeedPhraseAck(that: this);

  Future<FederationSelector> joinFederation({
    required String invite,
    required bool recover,
  }) => RustLib.instance.api.crateMultimintMultimintJoinFederation(
    that: this,
    invite: invite,
    recover: recover,
  );

  Future<BigInt> parseEcash({
    required FederationId federationId,
    required String ecash,
  }) => RustLib.instance.api.crateMultimintMultimintParseEcash(
    that: this,
    federationId: federationId,
    ecash: ecash,
  );

  Future<(Bolt11Invoice, OperationId)> receive({
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required SafeUrl gateway,
    required bool isLnv2,
  }) => RustLib.instance.api.crateMultimintMultimintReceive(
    that: this,
    federationId: federationId,
    amountMsatsWithFees: amountMsatsWithFees,
    amountMsatsWithoutFees: amountMsatsWithoutFees,
    gateway: gateway,
    isLnv2: isLnv2,
  );

  /// Refund the full balance on-chain to the Mutinynet faucet.
  ///
  /// This is a temporary method that assists with development and should
  /// be removed before supporting mainnet.
  Future<(String, BigInt)> refund({required FederationId federationId}) =>
      RustLib.instance.api.crateMultimintMultimintRefund(
        that: this,
        federationId: federationId,
      );

  Future<OperationId> reissueEcash({
    required FederationId federationId,
    required String ecash,
  }) => RustLib.instance.api.crateMultimintMultimintReissueEcash(
    that: this,
    federationId: federationId,
    ecash: ecash,
  );

  Future<(String, BigInt, bool)> selectReceiveGateway({
    required FederationId federationId,
    required Amount amount,
  }) => RustLib.instance.api.crateMultimintMultimintSelectReceiveGateway(
    that: this,
    federationId: federationId,
    amount: amount,
  );

  Future<(String, BigInt, bool)> selectSendGateway({
    required FederationId federationId,
    required Amount amount,
    required Bolt11Invoice bolt11,
  }) => RustLib.instance.api.crateMultimintMultimintSelectSendGateway(
    that: this,
    federationId: federationId,
    amount: amount,
    bolt11: bolt11,
  );

  Future<OperationId> send({
    required FederationId federationId,
    required String invoice,
    required SafeUrl gateway,
    required bool isLnv2,
  }) => RustLib.instance.api.crateMultimintMultimintSend(
    that: this,
    federationId: federationId,
    invoice: invoice,
    gateway: gateway,
    isLnv2: isLnv2,
  );

  Future<(OperationId, String, BigInt)> sendEcash({
    required FederationId federationId,
    required BigInt amountMsats,
  }) => RustLib.instance.api.crateMultimintMultimintSendEcash(
    that: this,
    federationId: federationId,
    amountMsats: amountMsats,
  );

  Future<List<Transaction>> transactions({
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  }) => RustLib.instance.api.crateMultimintMultimintTransactions(
    that: this,
    federationId: federationId,
    timestamp: timestamp,
    operationId: operationId,
    modules: modules,
  );

  Future<FederationSelector> waitForRecovery({required String inviteCode}) =>
      RustLib.instance.api.crateMultimintMultimintWaitForRecovery(
        that: this,
        inviteCode: inviteCode,
      );
}

@sealed
class NostrClientImpl extends RustOpaque implements NostrClient {
  // Not to be used by end users
  NostrClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  NostrClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_NostrClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_NostrClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_NostrClientPtr,
  );

  Future<void> updateFederationsFromNostr() => RustLib.instance.api
      .crateNostrNostrClientUpdateFederationsFromNostr(that: this);
}

@sealed
class OperationIdImpl extends RustOpaque implements OperationId {
  // Not to be used by end users
  OperationIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OperationIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OperationId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OperationId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OperationIdPtr,
  );
}

@sealed
class PublicFederationImpl extends RustOpaque implements PublicFederation {
  // Not to be used by end users
  PublicFederationImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PublicFederationImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PublicFederation,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PublicFederation,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_PublicFederationPtr,
  );

  String? get about => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetAbout(that: this);

  FederationId get federationId => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetFederationId(that: this);

  String get federationName => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetFederationName(that: this);

  List<String> get inviteCodes => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetInviteCodes(that: this);

  List<String> get modules => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetModules(that: this);

  String get network => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetNetwork(that: this);

  String? get picture => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorGetPicture(that: this);

  set about(String? about) => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorSetAbout(that: this, about: about);

  set federationId(FederationId federationId) => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorSetFederationId(
        that: this,
        federationId: federationId,
      );

  set federationName(String federationName) => RustLib.instance.api
      .crateNostrPublicFederationAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );

  set inviteCodes(List<String> inviteCodes) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetInviteCodes(
        that: this,
        inviteCodes: inviteCodes,
      );

  set modules(List<String> modules) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetModules(
        that: this,
        modules: modules,
      );

  set network(String network) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetNetwork(
        that: this,
        network: network,
      );

  set picture(String? picture) =>
      RustLib.instance.api.crateNostrPublicFederationAutoAccessorSetPicture(
        that: this,
        picture: picture,
      );
}

@sealed
class ReissueExternalNotesStateImpl extends RustOpaque
    implements ReissueExternalNotesState {
  // Not to be used by end users
  ReissueExternalNotesStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReissueExternalNotesStateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_ReissueExternalNotesState,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ReissueExternalNotesState,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ReissueExternalNotesStatePtr,
  );
}

@sealed
class SafeUrlImpl extends RustOpaque implements SafeUrl {
  // Not to be used by end users
  SafeUrlImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SafeUrlImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SafeUrl,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SafeUrl,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SafeUrlPtr,
  );
}

@sealed
class SpendOobStateImpl extends RustOpaque implements SpendOobState {
  // Not to be used by end users
  SpendOobStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SpendOobStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SpendOobState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpendOobState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpendOobStatePtr,
  );
}
