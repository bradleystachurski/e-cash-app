// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'db.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1710199218;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'carbine_fedimint',
        ioDirectory: 'rust/carbine_fedimint/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Connector crateDbFederationConfigAutoAccessorGetConnector({
    required FederationConfig that,
  });

  String crateDbFederationConfigAutoAccessorGetFederationName({
    required FederationConfig that,
  });

  InviteCode crateDbFederationConfigAutoAccessorGetInviteCode({
    required FederationConfig that,
  });

  void crateDbFederationConfigAutoAccessorSetConnector({
    required FederationConfig that,
    required Connector connector,
  });

  void crateDbFederationConfigAutoAccessorSetFederationName({
    required FederationConfig that,
    required String federationName,
  });

  void crateDbFederationConfigAutoAccessorSetInviteCode({
    required FederationConfig that,
    required InviteCode inviteCode,
  });

  FederationId crateFederationSelectorAutoAccessorGetFederationId({
    required FederationSelector that,
  });

  String crateFederationSelectorAutoAccessorGetFederationName({
    required FederationSelector that,
  });

  void crateFederationSelectorAutoAccessorSetFederationId({
    required FederationSelector that,
    required FederationId federationId,
  });

  void crateFederationSelectorAutoAccessorSetFederationName({
    required FederationSelector that,
    required String federationName,
  });

  Future<FinalReceiveOperationState> crateMultimintAwaitReceive({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<FinalSendOperationState> crateMultimintAwaitSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<Amount> crateMultimintBalance({
    required Multimint that,
    required FederationId federationId,
  });

  Future<List<FederationSelector>> crateMultimintFederations({
    required Multimint that,
  });

  Future<FederationSelector> crateMultimintJoinFederation({
    required Multimint that,
    required String inviteCode,
  });

  Future<Multimint> crateMultimintNew();

  Future<(String, OperationId)> crateMultimintReceive({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
  });

  Future<OperationId> crateMultimintSend({
    required Multimint that,
    required FederationId federationId,
    required String invoice,
  });

  Future<FinalReceiveOperationState> crateAwaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<FinalSendOperationState> crateAwaitSend({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<Amount> crateBalance({required FederationId federationId});

  Future<List<FederationSelector>> crateFederations();

  Future<FederationSelector> crateJoinFederation({required String inviteCode});

  Future<(String, OperationId)> crateReceive({
    required FederationId federationId,
    required Amount amount,
  });

  Future<OperationId> crateSend({
    required FederationId federationId,
    required String invoice,
  });

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Amount;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Amount;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AmountPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Connector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Connector;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ConnectorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationConfig;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FederationConfigPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FederationIdPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationSelector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationSelector;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FederationSelectorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalReceiveOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalReceiveOperationState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FinalReceiveOperationStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalSendOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalSendOperationState;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_FinalSendOperationStatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InviteCode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InviteCode;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_InviteCodePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Multimint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Multimint;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MultimintPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OperationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OperationId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OperationIdPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Connector crateDbFederationConfigAutoAccessorGetConnector({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetConnectorConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorGetConnectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_connector",
        argNames: ["that"],
      );

  @override
  String crateDbFederationConfigAutoAccessorGetFederationName({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbFederationConfigAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  InviteCode crateDbFederationConfigAutoAccessorGetInviteCode({
    required FederationConfig that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorGetInviteCodeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorGetInviteCodeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_get_invite_code",
        argNames: ["that"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetConnector({
    required FederationConfig that,
    required Connector connector,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
            connector,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetConnectorConstMeta,
        argValues: [that, connector],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDbFederationConfigAutoAccessorSetConnectorConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_connector",
        argNames: ["that", "connector"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetFederationName({
    required FederationConfig that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateDbFederationConfigAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  void crateDbFederationConfigAutoAccessorSetInviteCode({
    required FederationConfig that,
    required InviteCode inviteCode,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
            inviteCode,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateDbFederationConfigAutoAccessorSetInviteCodeConstMeta,
        argValues: [that, inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateDbFederationConfigAutoAccessorSetInviteCodeConstMeta =>
      const TaskConstMeta(
        debugName: "FederationConfig_auto_accessor_set_invite_code",
        argNames: ["that", "inviteCode"],
      );

  @override
  FederationId crateFederationSelectorAutoAccessorGetFederationId({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId,
          decodeErrorData: null,
        ),
        constMeta: kCrateFederationSelectorAutoAccessorGetFederationIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateFederationSelectorAutoAccessorGetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_federation_id",
        argNames: ["that"],
      );

  @override
  String crateFederationSelectorAutoAccessorGetFederationName({
    required FederationSelector that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateFederationSelectorAutoAccessorGetFederationNameConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateFederationSelectorAutoAccessorGetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_get_federation_name",
        argNames: ["that"],
      );

  @override
  void crateFederationSelectorAutoAccessorSetFederationId({
    required FederationSelector that,
    required FederationId federationId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateFederationSelectorAutoAccessorSetFederationIdConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateFederationSelectorAutoAccessorSetFederationIdConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_federation_id",
        argNames: ["that", "federationId"],
      );

  @override
  void crateFederationSelectorAutoAccessorSetFederationName({
    required FederationSelector that,
    required String federationName,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
            that,
            serializer,
          );
          sse_encode_String(federationName, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateFederationSelectorAutoAccessorSetFederationNameConstMeta,
        argValues: [that, federationName],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateFederationSelectorAutoAccessorSetFederationNameConstMeta =>
      const TaskConstMeta(
        debugName: "FederationSelector_auto_accessor_set_federation_name",
        argNames: ["that", "federationName"],
      );

  @override
  Future<FinalReceiveOperationState> crateMultimintAwaitReceive({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintAwaitReceiveConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintAwaitReceiveConstMeta => const TaskConstMeta(
    debugName: "Multimint_await_receive",
    argNames: ["that", "federationId", "operationId"],
  );

  @override
  Future<FinalSendOperationState> crateMultimintAwaitSend({
    required Multimint that,
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintAwaitSendConstMeta,
        argValues: [that, federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintAwaitSendConstMeta => const TaskConstMeta(
    debugName: "Multimint_await_send",
    argNames: ["that", "federationId", "operationId"],
  );

  @override
  Future<Amount> crateMultimintBalance({
    required Multimint that,
    required FederationId federationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintBalanceConstMeta,
        argValues: [that, federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintBalanceConstMeta => const TaskConstMeta(
    debugName: "Multimint_balance",
    argNames: ["that", "federationId"],
  );

  @override
  Future<List<FederationSelector>> crateMultimintFederations({
    required Multimint that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: null,
        ),
        constMeta: kCrateMultimintFederationsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintFederationsConstMeta => const TaskConstMeta(
    debugName: "Multimint_federations",
    argNames: ["that"],
  );

  @override
  Future<FederationSelector> crateMultimintJoinFederation({
    required Multimint that,
    required String inviteCode,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_String(inviteCode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintJoinFederationConstMeta,
        argValues: [that, inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintJoinFederationConstMeta =>
      const TaskConstMeta(
        debugName: "Multimint_join_federation",
        argNames: ["that", "inviteCode"],
      );

  @override
  Future<Multimint> crateMultimintNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintNewConstMeta =>
      const TaskConstMeta(debugName: "Multimint_new", argNames: []);

  @override
  Future<(String, OperationId)> crateMultimintReceive({
    required Multimint that,
    required FederationId federationId,
    required Amount amount,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
            amount,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintReceiveConstMeta,
        argValues: [that, federationId, amount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintReceiveConstMeta => const TaskConstMeta(
    debugName: "Multimint_receive",
    argNames: ["that", "federationId", "amount"],
  );

  @override
  Future<OperationId> crateMultimintSend({
    required Multimint that,
    required FederationId federationId,
    required String invoice,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(invoice, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateMultimintSendConstMeta,
        argValues: [that, federationId, invoice],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateMultimintSendConstMeta => const TaskConstMeta(
    debugName: "Multimint_send",
    argNames: ["that", "federationId", "invoice"],
  );

  @override
  Future<FinalReceiveOperationState> crateAwaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitReceiveConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitReceiveConstMeta => const TaskConstMeta(
    debugName: "await_receive",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<FinalSendOperationState> crateAwaitSend({
    required FederationId federationId,
    required OperationId operationId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
            operationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateAwaitSendConstMeta,
        argValues: [federationId, operationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateAwaitSendConstMeta => const TaskConstMeta(
    debugName: "await_send",
    argNames: ["federationId", "operationId"],
  );

  @override
  Future<Amount> crateBalance({required FederationId federationId}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount,
          decodeErrorData: null,
        ),
        constMeta: kCrateBalanceConstMeta,
        argValues: [federationId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateBalanceConstMeta =>
      const TaskConstMeta(debugName: "balance", argNames: ["federationId"]);

  @override
  Future<List<FederationSelector>> crateFederations() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: null,
        ),
        constMeta: kCrateFederationsConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateFederationsConstMeta =>
      const TaskConstMeta(debugName: "federations", argNames: []);

  @override
  Future<FederationSelector> crateJoinFederation({required String inviteCode}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(inviteCode, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateJoinFederationConstMeta,
        argValues: [inviteCode],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateJoinFederationConstMeta => const TaskConstMeta(
    debugName: "join_federation",
    argNames: ["inviteCode"],
  );

  @override
  Future<(String, OperationId)> crateReceive({
    required FederationId federationId,
    required Amount amount,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
            amount,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateReceiveConstMeta,
        argValues: [federationId, amount],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateReceiveConstMeta => const TaskConstMeta(
    debugName: "receive",
    argNames: ["federationId", "amount"],
  );

  @override
  Future<OperationId> crateSend({
    required FederationId federationId,
    required String invoice,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
            federationId,
            serializer,
          );
          sse_encode_String(invoice, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateSendConstMeta,
        argValues: [federationId, invoice],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSendConstMeta => const TaskConstMeta(
    debugName: "send",
    argNames: ["federationId", "invoice"],
  );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Amount =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Amount =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Connector =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Connector =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationConfig =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationConfig =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FederationSelector =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FederationSelector =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalReceiveOperationState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalReceiveOperationState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FinalSendOperationState =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FinalSendOperationState =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_InviteCode =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_InviteCode =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Multimint =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Multimint =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_OperationId =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_OperationId =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  Amount
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connector
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FinalReceiveOperationState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FinalSendOperationState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  InviteCode
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OperationId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Amount
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AmountImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Connector
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConnectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationConfig
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationConfigImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FederationSelector
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FinalReceiveOperationState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  FinalSendOperationState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  InviteCode
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return InviteCodeImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Multimint
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MultimintImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OperationId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OperationIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  List<FederationSelector>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector,
        )
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  (String, OperationId)
  dco_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
        arr[1],
      ),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Amount
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AmountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Connector
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalReceiveOperationState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalSendOperationState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InviteCode
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteCodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OperationId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Amount
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AmountImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Connector
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ConnectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationConfig
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationConfigImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FederationSelector
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FederationSelectorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalReceiveOperationState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalReceiveOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FinalSendOperationState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FinalSendOperationStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  InviteCode
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return InviteCodeImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Multimint
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MultimintImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  OperationId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OperationIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  List<FederationSelector>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FederationSelector>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  (String, OperationId)
  sse_decode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    Amount self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AmountImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    Connector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    FinalReceiveOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalReceiveOperationStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    FinalSendOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalSendOperationStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    InviteCode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InviteCodeImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    OperationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OperationIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAmount(
    Amount self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as AmountImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerConnector(
    Connector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ConnectorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationConfig(
    FederationConfig self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationConfigImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationId(
    FederationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    FederationSelector self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FederationSelectorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalReceiveOperationState(
    FinalReceiveOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalReceiveOperationStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFinalSendOperationState(
    FinalSendOperationState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FinalSendOperationStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerInviteCode(
    InviteCode self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as InviteCodeImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultimint(
    Multimint self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MultimintImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
    OperationId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as OperationIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
    List<FederationSelector> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFederationSelector(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_record_string_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_operation_id(
    (String, OperationId) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOperationId(
      self.$2,
      serializer,
    );
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class AmountImpl extends RustOpaque implements Amount {
  // Not to be used by end users
  AmountImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AmountImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Amount,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Amount,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_AmountPtr,
  );
}

@sealed
class ConnectorImpl extends RustOpaque implements Connector {
  // Not to be used by end users
  ConnectorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ConnectorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Connector,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Connector,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ConnectorPtr,
  );
}

@sealed
class FederationConfigImpl extends RustOpaque implements FederationConfig {
  // Not to be used by end users
  FederationConfigImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationConfigImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationConfig,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationConfig,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FederationConfigPtr,
  );

  Connector get connector => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetConnector(that: this);

  String get federationName => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetFederationName(that: this);

  InviteCode get inviteCode => RustLib.instance.api
      .crateDbFederationConfigAutoAccessorGetInviteCode(that: this);

  set connector(Connector connector) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetConnector(
        that: this,
        connector: connector,
      );

  set federationName(String federationName) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );

  set inviteCode(InviteCode inviteCode) =>
      RustLib.instance.api.crateDbFederationConfigAutoAccessorSetInviteCode(
        that: this,
        inviteCode: inviteCode,
      );
}

@sealed
class FederationIdImpl extends RustOpaque implements FederationId {
  // Not to be used by end users
  FederationIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationIdPtr,
  );
}

@sealed
class FederationSelectorImpl extends RustOpaque implements FederationSelector {
  // Not to be used by end users
  FederationSelectorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FederationSelectorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FederationSelector,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FederationSelector,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FederationSelectorPtr,
  );

  FederationId get federationId => RustLib.instance.api
      .crateFederationSelectorAutoAccessorGetFederationId(that: this);

  String get federationName => RustLib.instance.api
      .crateFederationSelectorAutoAccessorGetFederationName(that: this);

  set federationId(FederationId federationId) =>
      RustLib.instance.api.crateFederationSelectorAutoAccessorSetFederationId(
        that: this,
        federationId: federationId,
      );

  set federationName(String federationName) =>
      RustLib.instance.api.crateFederationSelectorAutoAccessorSetFederationName(
        that: this,
        federationName: federationName,
      );
}

@sealed
class FinalReceiveOperationStateImpl extends RustOpaque
    implements FinalReceiveOperationState {
  // Not to be used by end users
  FinalReceiveOperationStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FinalReceiveOperationStateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FinalReceiveOperationState,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalReceiveOperationState,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalReceiveOperationStatePtr,
  );
}

@sealed
class FinalSendOperationStateImpl extends RustOpaque
    implements FinalSendOperationState {
  // Not to be used by end users
  FinalSendOperationStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FinalSendOperationStateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_increment_strong_count_FinalSendOperationState,
    rustArcDecrementStrongCount:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalSendOperationState,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_FinalSendOperationStatePtr,
  );
}

@sealed
class InviteCodeImpl extends RustOpaque implements InviteCode {
  // Not to be used by end users
  InviteCodeImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  InviteCodeImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_InviteCode,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_InviteCode,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_InviteCodePtr,
  );
}

@sealed
class MultimintImpl extends RustOpaque implements Multimint {
  // Not to be used by end users
  MultimintImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MultimintImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Multimint,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Multimint,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MultimintPtr,
  );

  Future<FinalReceiveOperationState> awaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintAwaitReceive(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<FinalSendOperationState> awaitSend({
    required FederationId federationId,
    required OperationId operationId,
  }) => RustLib.instance.api.crateMultimintAwaitSend(
    that: this,
    federationId: federationId,
    operationId: operationId,
  );

  Future<Amount> balance({required FederationId federationId}) => RustLib
      .instance
      .api
      .crateMultimintBalance(that: this, federationId: federationId);

  Future<List<FederationSelector>> federations() =>
      RustLib.instance.api.crateMultimintFederations(that: this);

  Future<FederationSelector> joinFederation({required String inviteCode}) =>
      RustLib.instance.api.crateMultimintJoinFederation(
        that: this,
        inviteCode: inviteCode,
      );

  Future<(String, OperationId)> receive({
    required FederationId federationId,
    required Amount amount,
  }) => RustLib.instance.api.crateMultimintReceive(
    that: this,
    federationId: federationId,
    amount: amount,
  );

  Future<OperationId> send({
    required FederationId federationId,
    required String invoice,
  }) => RustLib.instance.api.crateMultimintSend(
    that: this,
    federationId: federationId,
    invoice: invoice,
  );
}

@sealed
class OperationIdImpl extends RustOpaque implements OperationId {
  // Not to be used by end users
  OperationIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OperationIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OperationId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OperationId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OperationIdPtr,
  );
}
