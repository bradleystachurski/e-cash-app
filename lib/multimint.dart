// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'multimint.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `_has_federation`, `await_receive_lnv1`, `await_receive_lnv2`, `await_send_lnv1`, `await_send_lnv2`, `build_client`, `compute_receive_amount`, `compute_send_amount`, `derive_federation_secret`, `get_client_database`, `invoice_routes_back_to_federation`, `lnv1_select_gateway`, `lnv1_update_gateway_cache`, `lnv2_select_gateway`, `load_clients`, `monitor_all_unused_pegin_addresses`, `pay_lnv1`, `pay_lnv2`, `receive_amount_after_fees`, `receive_lnv1`, `receive_lnv2`, `spawn_pegin_address_watcher`, `watch_pegin_address`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `ClientType`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Amount>>
abstract class Amount implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Bolt11Invoice>>
abstract class Bolt11Invoice implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DepositEvent>>
abstract class DepositEvent implements RustOpaqueInterface {
  DepositEventKind get eventKind;

  FederationId get federationId;

  set eventKind(DepositEventKind eventKind);

  set federationId(FederationId federationId);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FederationSelector>>
abstract class FederationSelector implements RustOpaqueInterface {
  FederationId get federationId;

  String get federationName;

  String get inviteCode;

  String? get network;

  set federationId(FederationId federationId);

  set federationName(String federationName);

  set inviteCode(String inviteCode);

  set network(String? network);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FinalReceiveOperationState>>
abstract class FinalReceiveOperationState implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FinalSendOperationState>>
abstract class FinalSendOperationState implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Multimint>>
abstract class Multimint implements RustOpaqueInterface {
  Future<void> ackSeedPhrase();

  Future<String> allocateDepositAddress({required FederationId federationId});

  Future<ReissueExternalNotesState> awaitEcashReissue({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<SpendOobState> awaitEcashSend({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<FinalReceiveOperationState> awaitReceive({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<(FinalSendOperationState, String)> awaitSend({
    required FederationId federationId,
    required OperationId operationId,
  });

  Future<BigInt> balance({required FederationId federationId});

  Future<bool> containsClient({required FederationId federationId});

  Future<List<(FederationSelector, bool)>> federations();

  Future<(FederationMeta, FederationSelector)> getFederationMeta({
    required String invite,
  });

  Future<List<String>> getMnemonic();

  Future<bool> hasSeedPhraseAck();

  Future<FederationSelector> joinFederation({
    required String invite,
    required bool recover,
  });

  Future<void> monitorDepositAddress({
    required FederationId federationId,
    required String address,
  });

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Multimint> newInstance({
    required Database db,
    required MultimintCreation creationType,
  }) => RustLib.instance.api.crateMultimintMultimintNew(
    db: db,
    creationType: creationType,
  );

  Future<BigInt> parseEcash({
    required FederationId federationId,
    required String ecash,
  });

  Future<(Bolt11Invoice, OperationId)> receive({
    required FederationId federationId,
    required BigInt amountMsatsWithFees,
    required BigInt amountMsatsWithoutFees,
    required SafeUrl gateway,
    required bool isLnv2,
  });

  /// Refund the full balance on-chain to the Mutinynet faucet.
  ///
  /// This is a temporary method that assists with development and should
  /// be removed before supporting mainnet.
  Future<(String, BigInt)> refund({required FederationId federationId});

  Future<OperationId> reissueEcash({
    required FederationId federationId,
    required String ecash,
  });

  Future<(String, BigInt, bool)> selectReceiveGateway({
    required FederationId federationId,
    required Amount amount,
  });

  Future<(String, BigInt, bool)> selectSendGateway({
    required FederationId federationId,
    required Amount amount,
    required Bolt11Invoice bolt11,
  });

  Future<OperationId> send({
    required FederationId federationId,
    required String invoice,
    required SafeUrl gateway,
    required bool isLnv2,
  });

  Future<(OperationId, String, BigInt)> sendEcash({
    required FederationId federationId,
    required BigInt amountMsats,
  });

  Stream<DepositEvent> subscribeDeposits({required FederationId federationId});

  Future<List<Transaction>> transactions({
    required FederationId federationId,
    BigInt? timestamp,
    Uint8List? operationId,
    required List<String> modules,
  });

  Future<FederationSelector> waitForRecovery({required String inviteCode});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OperationId>>
abstract class OperationId implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReissueExternalNotesState>>
abstract class ReissueExternalNotesState implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SafeUrl>>
abstract class SafeUrl implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SpendOOBState>>
abstract class SpendOobState implements RustOpaqueInterface {}

class AwaitingConfsEvent {
  final BigInt amount;
  final String txid;
  final BigInt blockHeight;
  final BigInt needed;

  const AwaitingConfsEvent({
    required this.amount,
    required this.txid,
    required this.blockHeight,
    required this.needed,
  });

  @override
  int get hashCode =>
      amount.hashCode ^ txid.hashCode ^ blockHeight.hashCode ^ needed.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is AwaitingConfsEvent &&
          runtimeType == other.runtimeType &&
          amount == other.amount &&
          txid == other.txid &&
          blockHeight == other.blockHeight &&
          needed == other.needed;
}

class ClaimedEvent {
  final BigInt amount;
  final String txid;

  const ClaimedEvent({required this.amount, required this.txid});

  @override
  int get hashCode => amount.hashCode ^ txid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ClaimedEvent &&
          runtimeType == other.runtimeType &&
          amount == other.amount &&
          txid == other.txid;
}

class ConfirmedEvent {
  final BigInt amount;
  final String txid;

  const ConfirmedEvent({required this.amount, required this.txid});

  @override
  int get hashCode => amount.hashCode ^ txid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConfirmedEvent &&
          runtimeType == other.runtimeType &&
          amount == other.amount &&
          txid == other.txid;
}

@freezed
sealed class DepositEventKind with _$DepositEventKind {
  const DepositEventKind._();

  const factory DepositEventKind.mempool(MempoolEvent field0) =
      DepositEventKind_Mempool;
  const factory DepositEventKind.awaitingConfs(AwaitingConfsEvent field0) =
      DepositEventKind_AwaitingConfs;
  const factory DepositEventKind.confirmed(ConfirmedEvent field0) =
      DepositEventKind_Confirmed;
  const factory DepositEventKind.claimed(ClaimedEvent field0) =
      DepositEventKind_Claimed;
}

class FederationMeta {
  final String? picture;
  final String? welcome;
  final List<Guardian> guardians;

  const FederationMeta({this.picture, this.welcome, required this.guardians});

  @override
  int get hashCode => picture.hashCode ^ welcome.hashCode ^ guardians.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FederationMeta &&
          runtimeType == other.runtimeType &&
          picture == other.picture &&
          welcome == other.welcome &&
          guardians == other.guardians;
}

class Guardian {
  final String name;
  final String? version;

  const Guardian({required this.name, this.version});

  @override
  int get hashCode => name.hashCode ^ version.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Guardian &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          version == other.version;
}

class MempoolEvent {
  final BigInt amount;
  final String txid;

  const MempoolEvent({required this.amount, required this.txid});

  @override
  int get hashCode => amount.hashCode ^ txid.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MempoolEvent &&
          runtimeType == other.runtimeType &&
          amount == other.amount &&
          txid == other.txid;
}

@freezed
sealed class MultimintCreation with _$MultimintCreation {
  const MultimintCreation._();

  const factory MultimintCreation.new_() = MultimintCreation_New;
  const factory MultimintCreation.loadExisting() =
      MultimintCreation_LoadExisting;
  const factory MultimintCreation.newFromMnemonic({
    required List<String> words,
  }) = MultimintCreation_NewFromMnemonic;
}

class PaymentPreview {
  final BigInt amountMsats;
  final String paymentHash;
  final String network;
  final String invoice;
  final String gateway;
  final BigInt amountWithFees;
  final bool isLnv2;

  const PaymentPreview({
    required this.amountMsats,
    required this.paymentHash,
    required this.network,
    required this.invoice,
    required this.gateway,
    required this.amountWithFees,
    required this.isLnv2,
  });

  @override
  int get hashCode =>
      amountMsats.hashCode ^
      paymentHash.hashCode ^
      network.hashCode ^
      invoice.hashCode ^
      gateway.hashCode ^
      amountWithFees.hashCode ^
      isLnv2.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PaymentPreview &&
          runtimeType == other.runtimeType &&
          amountMsats == other.amountMsats &&
          paymentHash == other.paymentHash &&
          network == other.network &&
          invoice == other.invoice &&
          gateway == other.gateway &&
          amountWithFees == other.amountWithFees &&
          isLnv2 == other.isLnv2;
}

class Transaction {
  final bool received;
  final BigInt amount;
  final String module;
  final BigInt timestamp;
  final Uint8List operationId;

  const Transaction({
    required this.received,
    required this.amount,
    required this.module,
    required this.timestamp,
    required this.operationId,
  });

  @override
  int get hashCode =>
      received.hashCode ^
      amount.hashCode ^
      module.hashCode ^
      timestamp.hashCode ^
      operationId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Transaction &&
          runtimeType == other.runtimeType &&
          received == other.received &&
          amount == other.amount &&
          module == other.module &&
          timestamp == other.timestamp &&
          operationId == other.operationId;
}
